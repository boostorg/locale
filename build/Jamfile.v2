# Copyright 2003 John Maddock
# Copyright 2010 Artyom Beilis
# Copyright 2021 - 2022 Alexander Grund
#
# Distributed under the Boost Software License, Version 1.0.
# https://www.boost.org/LICENSE_1_0.txt.

import configure ;
import feature ;
import os ;
import path ;
import toolset ;

path-constant TOP : .. ;

project /boost/locale
    : source-location $(TOP)/src/boost/locale
    ;

# Features

feature.feature boost.locale.iconv : on off : optional propagated ;
feature.feature boost.locale.icu : on off :  optional propagated ;
feature.feature boost.locale.posix : on off : optional propagated ;
feature.feature boost.locale.std : on off : optional propagated ;
feature.feature boost.locale.winapi : on off : optional propagated ;

# Configuration of libraries

## iconv

exe has_iconv : $(TOP)/build/has_iconv.cpp ;
explicit has_iconv ;

ICONV_PATH = [ modules.peek : ICONV_PATH ] ;

lib iconv
  :
  : <search>$(ICONV_PATH)/lib <link>shared <runtime-link>shared
  :
  : <include>$(ICONV_PATH)/include
  ;

explicit iconv ;

exe has_external_iconv : $(TOP)/build/has_iconv.cpp iconv ;
explicit has_external_iconv ;

exe accepts_shared_option   : $(TOP)/build/option.cpp
                            :   <cxxflags>-shared-libstdc++
                                <cxxflags>-shared-libgcc
                                <linkflags>-shared-libstdc++
                                <linkflags>-shared-libgcc
                            ;

# Xlocale

exe has_xlocale : $(TOP)/build/has_xlocale.cpp ;
explicit has_xlocale ;

#end xlocale

# Specify the root path to the installed ICU libraries via
#   - Environment variable: ICU_PATH
#   - `b2 .. -s ICU_PATH=x`
#   - In project-config.jam as `path-constant ICU_PATH : x ;

local icu-path = [ modules.peek : ICU_PATH ] ; # -sICU_PATH=x or env variable
icu-path ?= $(ICU_PATH) ;                      # path-constant

if $(icu-path)
{
    icu-path = [ path.make $(icu-path) ] ; # Normalize
}

ICU_LINK = [ modules.peek : ICU_LINK ] ;
# Temporary workaround for incompatibility of ICU_LINK with Boost.Regex:
# Use ICU_LINK_LOCALE instead of ICU_LINK.
# Note that ICU_LINK and ICU_LINK_LOCALE will be removed in Boost 1.81
# in favor of a similar solution to Boost.Regex or a B2 module.
ICU_LINK ?= [ modules.peek : ICU_LINK_LOCALE ] ;

if $(ICU_LINK)
{
    ICU_OPTS = <include>$(icu-path)/include <linkflags>$(ICU_LINK) <dll-path>$(icu-path)/bin <runtime-link>shared ;
    ICU64_OPTS = <include>$(icu-path)/include <linkflags>$(ICU_LINK) <dll-path>$(icu-path)/bin64 <runtime-link>shared ;
} else
{
    searched-lib icuuc : :  <name>icuuc
                            <search>$(icu-path)/lib
                            <link>shared
                            <runtime-link>shared ;

    searched-lib icuuc : :  <toolset>msvc
                            <variant>debug
                            <name>icuucd
                            <search>$(icu-path)/lib
                            <link>shared
                            <runtime-link>shared ;

    searched-lib icuuc : :  <name>this_is_an_invalid_library_name ;

    searched-lib icudt : :  <search>$(icu-path)/lib
                            <name>icudata
                            <link>shared
                            <runtime-link>shared ;

    searched-lib icudt : :  <search>$(icu-path)/lib
                            <name>icudt
                            <toolset>msvc
                            <link>shared
                            <runtime-link>shared ;

    searched-lib icudt : :  <name>this_is_an_invalid_library_name ;

    searched-lib icuin : :  <search>$(icu-path)/lib
                            <name>icui18n
                            <link>shared
                            <runtime-link>shared ;

    searched-lib icuin : :  <toolset>msvc
                            <variant>debug
                            <name>icuind
                            <search>$(icu-path)/lib
                            <link>shared
                            <runtime-link>shared ;

    searched-lib icuin : :  <toolset>msvc
                            <variant>release
                            <name>icuin
                            <search>$(icu-path)/lib
                            <link>shared
                            <runtime-link>shared ;

    searched-lib icuin : :  <name>this_is_an_invalid_library_name ;

    explicit icuuc icudt icuin ;

    ICU_OPTS =   <include>$(icu-path)/include
      <library>icuuc/<link>shared/<runtime-link>shared
      <library>icudt/<link>shared/<runtime-link>shared
      <library>icuin/<link>shared/<runtime-link>shared
      <dll-path>$(icu-path)/bin
        <runtime-link>shared ;



    searched-lib icuuc_64 : :   <name>icuuc
                                <search>$(icu-path)/lib64
                                <link>shared
                                <runtime-link>shared ;

    searched-lib icuuc_64 : :   <toolset>msvc
                                <variant>debug
                                <name>icuucd
                                <search>$(icu-path)/lib64
                                <link>shared
                                <runtime-link>shared ;

    searched-lib icuuc_64 : :   <name>this_is_an_invalid_library_name ;

    searched-lib icudt_64 : :   <search>$(icu-path)/lib64
                                <name>icudata
                                <link>shared
                                <runtime-link>shared ;

    searched-lib icudt_64 : :   <search>$(icu-path)/lib64
                                <name>icudt
                                <toolset>msvc
                                <link>shared
                                <runtime-link>shared ;

    searched-lib icudt_64 : :   <name>this_is_an_invalid_library_name ;

    searched-lib icuin_64 : :   <search>$(icu-path)/lib64
                                <name>icui18n
                                <link>shared
                                <runtime-link>shared ;

    searched-lib icuin_64 : :   <toolset>msvc
                                <variant>debug
                                <name>icuind
                                <search>$(icu-path)/lib64
                                <link>shared
                                <runtime-link>shared ;

    searched-lib icuin_64 : :   <toolset>msvc
                                <variant>release
                                <name>icuin
                                <search>$(icu-path)/lib64
                                <link>shared
                                <runtime-link>shared ;

    searched-lib icuin_64 : :   <name>this_is_an_invalid_library_name ;

    explicit icuuc_64 icudt_64 icuin_64 ;

    ICU64_OPTS =   <include>$(icu-path)/include
      <library>icuuc_64/<link>shared/<runtime-link>shared
      <library>icudt_64/<link>shared/<runtime-link>shared
      <library>icuin_64/<link>shared/<runtime-link>shared
      <dll-path>$(icu-path)/bin64
        <runtime-link>shared ;

}

exe has_icu   : $(TOP)/build/has_icu_test.cpp : $(ICU_OPTS)   ;
exe has_icu64 : $(TOP)/build/has_icu_test.cpp : $(ICU64_OPTS) ;

explicit has_icu has_icu64 ;


# This function is called whenever the 'boost_locale' metatarget
# below is generated and figures what external components we have,
# what user wants, and what sources have to be compiled in the end.
rule configure-full ( properties * : flags-only )
{

    local result ;
    local flags-result ;

    local found-iconv ;

    # The system Iconv on Solaris may have bugs, while the GNU Iconv is fine.
    # So enable by default only if not on Solaris.
    if <boost.locale.iconv>on in $(properties)
      || ( ! <boost.locale.iconv> in $(properties:G) && ! <target-os>solaris in $(properties) )
    {
        # See if iconv is bundled with standard library.
        if [ configure.builds has_iconv : $(properties) : "iconv (libc)" ]
        {
            found-iconv = true ;
        } else if [ configure.builds has_external_iconv : $(properties) : "iconv (separate)" ]
        {
            found-iconv = true ;
            result += <library>iconv ;
        }
    }
    if $(found-iconv)
    {
        flags-result += <define>BOOST_LOCALE_WITH_ICONV=1 ;
    }

    local found-icu ;

    if ! <boost.locale.icu>off in $(properties)
    {
        if [ configure.builds has_icu : $(properties) : "icu" ]
        {
            found-icu = true ;
            flags-result += <define>BOOST_LOCALE_WITH_ICU=1 $(ICU_OPTS) ;
        } else if [ configure.builds has_icu64 : $(properties) : "icu (lib64)" ]
        {
            found-icu = true ;
            flags-result += <define>BOOST_LOCALE_WITH_ICU=1 $(ICU64_OPTS) ;
        }

        if $(found-icu)
        {
            ICU_SOURCES =
                boundary
                codecvt
                collator
                conversion
                date_time
                formatter
                icu_backend
                numeric
                time_zone
                ;

            result += <source>icu/$(ICU_SOURCES).cpp
                      <library>/boost/thread//boost_thread
                      ;
        }
    }

    if ! $(found-iconv) && ! $(found-icu) && ! <target-os>windows in $(properties) && ! <target-os>cygwin in $(properties)
    {
        ECHO "- Boost.Locale needs either iconv or ICU library to be built." ;
        result += <build>no ;
    }

    if ! <boost.locale.std> in $(properties:G)
    {
        if <toolset>sun in $(properties)
        {
            properties += <boost.locale.std>off ;
        } else
        {
            properties += <boost.locale.std>on ;
        }
    }

    if <boost.locale.std>off in $(properties)
    {
        flags-result += <define>BOOST_LOCALE_NO_STD_BACKEND=1 ;
    } else
    {
        STD_SOURCES =
          codecvt
          collate
          converter
          numeric
          std_backend
          ;
        result += <source>std/$(STD_SOURCES).cpp ;
    }

    if ! <boost.locale.winapi> in $(properties:G)
    {
        if <target-os>windows in $(properties) || <target-os>cygwin in $(properties)
        {
            properties += <boost.locale.winapi>on ;
        } else
        {
            properties += <boost.locale.winapi>off ;
        }
    }
    if  <target-os>windows in $(properties)
        && <toolset>gcc in $(properties)
        && <link>shared in $(properties)
        && [ configure.builds accepts_shared_option : $(properties) : "g++ -shared-* supported" ]
    {
        flags-result += <cxxflags>-shared-libstdc++
                        <cxxflags>-shared-libgcc
                        <linkflags>-shared-libstdc++
                        <linkflags>-shared-libgcc
                        ;
    }

    if <boost.locale.winapi>off in $(properties)
    {
        flags-result += <define>BOOST_LOCALE_NO_WINAPI_BACKEND=1 ;
    } else
    {
        WINAPI_SOURCES =
            collate
            converter
            numeric
            win_backend
          ;
        result += <source>win32/$(WINAPI_SOURCES).cpp ;
    }

    if ( ! <boost.locale.winapi>off in $(properties) || ! <boost.locale.std>off in $(properties) )
       && ( <target-os>windows in $(properties) || <target-os>cygwin in $(properties) )
    {
        result += <source>win32/lcid.cpp ;
    }

    if ! <boost.locale.posix> in $(properties:G)
    {
        if <target-os>linux in $(properties)
            || <target-os>darwin in $(properties)
            || ( <target-os>freebsd in $(properties) && [ configure.builds has_xlocale : $(properties) : "xlocale supported" ] )
        {
            properties += <boost.locale.posix>on ;
        } else
        {
            properties += <boost.locale.posix>off ;
        }
    }

    if <boost.locale.posix>off in $(properties)
    {
        flags-result += <define>BOOST_LOCALE_NO_POSIX_BACKEND=1 ;
    } else
    {
        POSIX_SOURCES =
          collate
          converter
          numeric
          codecvt
          posix_backend
          ;
        result += <source>posix/$(POSIX_SOURCES).cpp ;
    }

    if <boost.locale.posix>on in $(properties) || <boost.locale.std>on in $(properties) || <boost.locale.winapi>on in $(properties)
    {
        result += <source>util/gregorian.cpp ;
    }

    if "$(flags-only)" = "flags"
    {
        return $(flags-result) ;
    } else
    {
        result += $(flags-result) ;
        return $(result) ;
    }
}

rule configure ( properties * )
{
    local result = [ configure-full $(properties) : "all" ] ;
    return $(result) ;
}

rule configure-flags ( properties * )
{
    local result ;
    result = [ configure-full $(properties) : "flags" ] ;
    return $(result) ;
}

alias build_flags : : : : <conditional>@configure-flags ;

boost-lib locale
    :
      encoding/codepage.cpp
      shared/date_time.cpp
      shared/format.cpp
      shared/formatting.cpp
      shared/generator.cpp
      shared/ids.cpp
      shared/localization_backend.cpp
      shared/message.cpp
      shared/mo_lambda.cpp
      util/codecvt_converter.cpp
      util/default_locale.cpp
      util/info.cpp
      util/locale_data.cpp
    :
      # Don't link explicitly, not required
      <define>BOOST_THREAD_NO_LIB=1
      <include>$(TOP)/src
      <threading>multi
      <target-os>windows:<define>_CRT_SECURE_NO_WARNINGS
      <toolset>gcc:<cxxflags>"-Wno-long-long -Wno-deprecated-declarations"
      <toolset>clang:<cxxflags>"-Wno-long-long -Wno-deprecated-declarations"
      # Meanwhile remove this
      <conditional>@configure
    ;
